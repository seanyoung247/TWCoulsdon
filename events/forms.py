""" Defines the forms used by the events app """
from django import forms

from .models import ShowType, EventDate, Event, Image


class EventDateForm(forms.ModelForm):
    """ Creates a form to create and update event dates """
    class Meta:
        model = EventDate
        fields = ('event', 'date',)


class ImageForm(forms.ModelForm):
    """ Creates a form to create and update images """
    class Meta:
        model = Image
        fields = ('event', 'name', 'description', 'image',)


class ShowTypeModelChoiceField(forms.ModelChoiceField):
    """ Overrides the default labeling of a choice field to show display name """
    def label_from_instance(self, obj):
        """ Returns display name """
        return obj.get_display_name()


class EventForm(forms.ModelForm):
    """ Creates a form to create and update events """
    type = ShowTypeModelChoiceField(queryset=ShowType.objects.all())
    class Meta:
        model = Event
        # Post date is autogenerated, title image set by radio button on image
        fields = ('title', 'author', 'tagline', 'description',
                    'type', 'venue', 'content',)

    def __init__(self, *args, **kwargs):
        """ Initialises the Event form """
        super().__init__(*args, **kwargs)
        placeholders = {
            'title': 'Event Title',
            'author': 'Event Author',
            'tagline': 'Tag Line',
            'description': 'Description',
            'type': 'Select Event Type',
            'venue': 'Select Venue',
            'content': 'Youtube video embed link',
        }
        help_text = {
            'content': 'You can get this link from youtube by right clicking on \
                        the video and selecting "copy video url".'
        }

        self.fields['title'].widget.attrs['autofocus'] = True

        for field in self.fields:
            if self.fields[field].required:
                placeholder = f'{placeholders[field]} *'
            else:
                placeholder = placeholders[field]

            if field in help_text:
                self.fields[field].help_text = help_text[field]

            self.fields[field].widget.attrs['placeholder'] = placeholder
            self.fields[field].empty_label = None
            self.fields[field].label = False
