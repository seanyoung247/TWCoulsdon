""" Defines the forms used by the events app """
from datetime import datetime, timedelta
from django import forms
from django.utils import timezone
from tinymce.widgets import TinyMCE

from .models import ShowType, EventDate, Event, Venue, Image


class EventDateForm(forms.ModelForm):
    """ Creates a form to create and update event dates """
    class Meta:
        model = EventDate
        # Event is generated automatically on creation
        exclude = ('event',)
        widgets = {
            'date': forms.SplitDateTimeWidget(
                    attrs={'class': 'shite'},
                    date_attrs={'type': 'date'},
                    time_attrs={'type': 'time'},
                )
        }

    def __init__(self, *args, **kwargs):
        """ Initialises the EventDate form """
        super().__init__(*args, **kwargs)

        self.fields['date'].label = False


class ImageForm(forms.ModelForm):
    """ Creates a form to create and update images """
    class Meta:
        model = Image
        exclude = ('event',)

    def __init__(self, *args, **kwargs):
        """ Initialises the EventDate form """
        super().__init__(*args, **kwargs)
        placeholders = {
            'name': 'Name',
            'description': 'Description',
            'image': 'Image',
        }

        for field in self.fields:
            if self.fields[field].required:
                placeholder = f'{placeholders[field]} *'
            else:
                placeholder = placeholders[field]

            self.fields[field].widget.attrs['placeholder'] = placeholder
            self.fields[field].label = False


class ShowTypeModelChoiceField(forms.ModelChoiceField):
    """ Overrides the default labeling of a choice field to show display name """
    def label_from_instance(self, obj):
        """ Returns display name """
        return obj.get_display_name()


class EventForm(forms.ModelForm):
    """ Creates a form to create and update events """
    type = ShowTypeModelChoiceField(queryset=ShowType.objects.all())
    class Meta:
        model = Event
        # Post date is autogenerated, title image set by radio button on image
        exclude = (
            'post_date',
            'title_image',
        )

    def __init__(self, *args, **kwargs):
        """ Initialises the Event form """
        super().__init__(*args, **kwargs)
        placeholders = {
            'title': 'Event Title',
            'author': 'Event Author',
            'tagline': 'Tag Line',
            'description': 'Description',
            'type': 'Select Event Type',
            'venue': 'Select Venue',
            'content': 'Youtube video embed link',
        }
        help_text = {
            'content': 'You can get this link from youtube by right clicking on \
                        the video and selecting "copy video url".'
        }

        self.fields['title'].widget.attrs['autofocus'] = True

        for field in self.fields:
            if self.fields[field].required:
                placeholder = f'{placeholders[field]} *'
            else:
                placeholder = placeholders[field]

            if field in help_text:
                self.fields[field].help_text = help_text[field]

            self.fields[field].widget.attrs['placeholder'] = placeholder
            self.fields[field].empty_label = None
            self.fields[field].label = False
